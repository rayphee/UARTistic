C51 COMPILER V9.53.0.0   EFM8BB3_UART_INTERRUPT                                            05/08/2017 20:00:00 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB3_UART_INTERRUPT
OBJECT MODULE PLACED IN .\src/EFM8BB3_UART_Interrupt.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/rafi/SimplicityStudio/v4_workspace/UARTisticFucK/src/EFM8BB3_UART_Interrupt.c OMF2 SMALL DEBUG OBJECTEXTEND R
                    -OM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/raf
                    -i/SimplicityStudio/v4_workspace/UARTisticFucK/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/80
                    -51/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer
                    -/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/80
                    -51/v4.0.3//kits/common/bsp;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/EFM8B
                    -B3/peripheral_driver/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/dr
                    -ivers/efm8_memory_lcd/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/d
                    -rivers/efm8_memory_lcd/inc/graphics;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kit
                    -s/common/drivers/efm8_joystick;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/s
                    -hared/si8051base;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc;/Ap
                    -plications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_retargetserial) P
                    -RINT(.\src/EFM8BB3_UART_Interrupt.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/EFM8BB3_UART_Interrupt.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8BB3_UART0_Interrupt.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program demonstrates how to configure the EFM8BB3 to write to and
  10          // read from the UART0 interface. The program reads a word using the UART0
  11          // interrupt and outputs that word to the screen, with all characters in
  12          // uppercase.
  13          //
  14          // Resources:
  15          //   SYSCLK - 24.5 MHz HFOSC0 / 1
  16          //   UART0  - 115200 baud, 8-N-1
  17          //   Timer1 - UART0 clock source
  18          //   P0.4   - UART0 TX
  19          //   P0.5   - UART0 RX
  20          //   P2.2   - Board Controller enable
  21          //   P3.4   - Display enable
  22          //
  23          //-----------------------------------------------------------------------------
  24          // How To Test: EFM8BB3 STK
  25          //-----------------------------------------------------------------------------
  26          // 1) Place the switch in "AEM" mode.
  27          // 2) Connect the EFM8BB3 STK board to a PC using a mini USB cable.
  28          // 3) Compile and download code to the EFM8BB3 STK board.
  29          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  30          //    click the Debug button in the quick menu, or press F11.
  31          // 4) On the PC, open HyperTerminal (or any other terminal program) and connect
  32          //    to the JLink CDC UART Port at 115200 baud rate and 8-N-1.
  33          // 5) Run the code.
  34          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  35          //    click the Resume button in the quick menu, or press F8.
  36          // 6) Using a terminal program on the PC, input any number of lower-case
  37          //    characters, up to UART_BUFFERSIZE (default 64), followed by either
  38          //    a carriage return ('\r'), a newline character ('\n'), or a tilda ('~').
  39          //    The program will change the input characters to upper-case and output
  40          //    them over UART.
  41          //
  42          // Target:         EFM8BB3
  43          // Tool chain:     Generic
C51 COMPILER V9.53.0.0   EFM8BB3_UART_INTERRUPT                                            05/08/2017 20:00:00 PAGE 2   

  44          //
  45          // Release 0.1 (ST)
  46          //    - Initial Revision
  47          //    - 20 MAY 2015
  48          //
  49          
  50          //-----------------------------------------------------------------------------
  51          // Includes
  52          //-----------------------------------------------------------------------------
  53          #include <SI_EFM8BB3_Register_Enums.h>
  54          #include <SI_EFM8BB3_Defs.h>
  55          #include "retargetserial.h"
  56          #include "render.h"
*** WARNING C318 IN LINE 8 OF /Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/comm
             -on/drivers/efm8_memory_lcd/inc/config\render_config.h: can't open file 'memory_lcd_config.h'
  57          #include "../lib/bsp/efm8_memory_lcd/inc/render-extended.h"
  58          #include "disp.h"
  59          #include "joystick.h"
*** WARNING C318 IN LINE 18 OF /Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/com
             -mon/drivers/efm8_joystick\joystick.h: can't open file 'joystick_config.h'
  60          #include "InitDevice.h"
  61          
  62          //-----------------------------------------------------------------------------
  63          // Pin Definitions
  64          //-----------------------------------------------------------------------------
  65          SI_SBIT (DISP_EN, SFR_P3, 4);          // Display Enable
  66          #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
  67          #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
  68          
  69          SI_SBIT (BC_EN, SFR_P2, 2);            // Board Controller Enable
  70          #define BC_DISCONNECTED 0              // 0 = Board Controller disconnected
  71                                                 //     to EFM8 UART pins
  72          #define BC_CONNECTED    1              // 1 = Board Controller connected
  73                                                 //     to EFM8 UART pins
  74          
  75          //-----------------------------------------------------------------------------
  76          // Global Variables
  77          //-----------------------------------------------------------------------------
  78          // Variables in Interrupts.c
  79          unsigned char xdata textBuffer[520] = {0};
  80          int bufOffset = 0;
  81          int bufLen = 0;
  82          char xdata thatDankDisplayShit[21];
  83          int8_t scrollOffset = 0;
  84          uint8_t allowScroll = 1;
  85          int bl_;
  86          int bo_;
  87          int min(int a, int b){
  88   1              if(a<b) return a; else return b;
  89   1      }
  90          int max(int a, int b){
  91   1              if(a>b) return a; else return b;
  92   1      }
  93          //-----------------------------------------------------------------------------
  94          // Main Routine
  95          //-----------------------------------------------------------------------------
  96          static uint8_t getJoystick(void)
  97          {
  98   1        uint32_t mv;
  99   1        uint8_t dir;
 100   1      
 101   1        ADC0CN0_ADBUSY = 1;
 102   1        while (!ADC0CN0_ADINT);
C51 COMPILER V9.53.0.0   EFM8BB3_UART_INTERRUPT                                            05/08/2017 20:00:00 PAGE 3   

 103   1        ADC0CN0_ADINT = 0;
 104   1      
 105   1        mv = ((uint32_t)ADC0) * 3300 / 1024;
 106   1      
 107   1        dir = JOYSTICK_convert_mv_to_direction(mv);
 108   1      
 109   1        return dir;
 110   1      }
 111          
 112          //-----------------------------------------------------------------------------
 113          // getWaitJoystick
 114          //-----------------------------------------------------------------------------
 115          //
 116          // Get joystick input. If joystick was moved, wait for release. Return joystick
 117          // direction. Valid return values:
 118          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
 119          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 120          //
 121          static uint8_t getWaitJoystick(void)
 122          {
 123   1              uint32_t mv;
 124   1      
 125   1               ADC0CN0_ADBUSY = 1;
 126   1                  while (!ADC0CN0_ADINT);
 127   1                  ADC0CN0_ADINT = 0;
 128   1      
 129   1                  mv = ((uint32_t)ADC0) * 3300 / 1024 / 4;
 130   1                  mv = mv+1;
 131   1                  return JOYSTICK_convert_mv_to_direction(mv);
 132   1      }
 133          //static uint8_t getWaitJoystick(void)
 134          //{
 135          //  uint8_t dir, dirSave;
 136          //
 137          //  dir = getJoystick();
 138          //  dirSave = dir;
 139          //
 140          //  // wait for release then transition
 141          //  while (dir != JOYSTICK_NONE)
 142          //  {
 143          //    dir = getJoystick();
 144          //  }
 145          //
 146          //  return dirSave;
 147          //}
 148          
 149          static void processInput(uint8_t dir)
 150          {
 151   1        // process input
 152   1        if (dir == JOYSTICK_N && allowScroll)
 153   1        {
 154   2          scrollOffset++;
 155   2          P1_B6 = 0;
 156   2        }
 157   1        else if (dir == JOYSTICK_S && allowScroll)
 158   1        {
 159   2          P1_B6 = 0;
 160   2          scrollOffset--;
 161   2        }
 162   1        else{
 163   2                P1_B6 = 1;
 164   2                P1_B5 = 1;
 165   2      
C51 COMPILER V9.53.0.0   EFM8BB3_UART_INTERRUPT                                            05/08/2017 20:00:00 PAGE 4   

 166   2        }
 167   1        allowScroll = (dir == 0);
 168   1        scrollOffset = max(0,min(scrollOffset,(bufLen-1)/20-15));
 169   1      }
 170          
 171          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
 172          {
 173   1              int endOffset;
 174   1              if(P1_B4 == 0){
 175   2                              P1_B4 = 1;
 176   2                      }
 177   1                      else{
 178   2                              P1_B4 = 0;
 179   2                      }
 180   1              while(SCON0_RI) {
 181   2                              SCON0_RI = 0;
 182   2                              endOffset = (bufOffset + bufLen)%520;
 183   2                              textBuffer[endOffset] = SBUF0;
 184   2              if(bufLen < 519) bufLen++; else {
 185   3                      bufOffset+=bo_;
 186   3                      bufLen=bl_;
 187   3              }
 188   2                      }
 189   1      }
 190          
 191          void main (void)
 192          {
 193   1              uint8_t i;
 194   1              uint8_t j;
 195   1              uint8_t firstLine;
 196   1              bool hexModeStatus = false;
 197   1              bool lP0B2;
 198   1      
 199   1              bl_ = 500;
 200   1              bo_ = 20;
 201   1              enter_DefaultMode_from_RESET();
 202   1      
 203   1      
 204   1              DISP_EN = DISP_EFM8_DRIVEN;             // EFM8 drives display
 205   1      
 206   1              TMR2CN0 = 2;
 207   1      
 208   1              BC_EN = BC_DISCONNECTED;                // Board controller connected to EFM8
 209   1                                                 // UART pins
 210   1              IE_EA = 1;
 211   1      
 212   1              DISP_Init();
 213   1      
 214   1              while(1)
 215   1              {
 216   2                      processInput(getWaitJoystick());
 217   2      
 218   2                      if (!P0_B2 && hexModeStatus) {
 219   3                              hexModeStatus = false;
 220   3                              lP0B2 = true;
 221   3                      }
 222   2                      else if(!P0_B2 && !hexModeStatus){
 223   3                              hexModeStatus = true;
 224   3                              lP0B2 = true;
 225   3                      }
 226   2                      else{
 227   3                              lP0B2 = false;
 228   3                      }
C51 COMPILER V9.53.0.0   EFM8BB3_UART_INTERRUPT                                            05/08/2017 20:00:00 PAGE 5   

 229   2                      if (!hexModeStatus){
 230   3                              /*
 231   3                              for (j=0; j<(bufLen/20);j++){
 232   3                                      for (i=0;i<21;i++){
 233   3                                              thatDankDisplayShit[i]=textBuffer[(21*j)+(i+scrollOffset)];
 234   3                                      }
 235   3                                      renderAndWrite(0,8*j,0, thatDankDisplayShit);
 236   3                              }
 237   3                              */
 238   3                              firstLine = max(0,(bufLen-1)/20-15)-scrollOffset;
 239   3                              for(j=firstLine; j < min(firstLine+16,(bufLen-1)/20+1); j++){
 240   4                                      for(i = 0 ; i < 20; i++){
 241   5                                              // our offset in the buffer should be 20*j + i
 242   5                                              if(20*j + i >= bufLen) thatDankDisplayShit[i] = 0;
 243   5                                              else thatDankDisplayShit[i] = textBuffer[(20*j + i + bufOffset)%520];
 244   5      
 245   5                                      }
 246   4                                      renderAndWrite(0, 8*(j-firstLine),0,thatDankDisplayShit);
 247   4                              }
 248   3                      }
 249   2                      else if (hexModeStatus) {
 250   3                              DISP_ClearAll();
 251   3                              renderAndWriteCenteredText(46, 1, "GOD MODE");
 252   3                      }
 253   2              }
 254   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    642    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =    541    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
